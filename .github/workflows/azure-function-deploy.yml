name: Deploy Azure Function with Key Vault

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'LogProcessorFunction/**'
      - 'requirements.txt'
      - 'host.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'LogProcessorFunction/**'
      - 'requirements.txt'
      - 'host.json'

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.9'

jobs:
  # Job de validação e testes
  validate:
    runs-on: ubuntu-latest
    name: Validate and Test
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Install dependencies'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
        popd

    - name: 'Code formatting check with Black'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        black --check --diff LogProcessorFunction/
        popd

    - name: 'Lint with flake8'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        flake8 LogProcessorFunction/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 LogProcessorFunction/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        popd

    - name: 'Run unit tests'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        # Criar testes básicos se não existirem
        mkdir -p tests
        if [ ! -f tests/test_function.py ]; then
          cat > tests/test_function.py << 'EOF'
        import unittest
        from unittest.mock import patch, MagicMock
        import sys
        import os
        
        # Adicionar o diretório da função ao path
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'LogProcessorFunction'))
        
        class TestLogProcessor(unittest.TestCase):
            def test_filter_log_lines(self):
                # Teste básico da função de filtro
                from LogProcessorFunction import filter_log_lines
                
                test_lines = [
                    "2023-01-01 10:00:00 User login successful\n",
                    "2023-01-01 10:01:00 Regular operation\n", 
                    "2023-01-01 10:02:00 User logout\n",
                    "2023-01-01 10:03:00 Login failed\n"
                ]
                
                filtered = filter_log_lines(test_lines)
                self.assertEqual(len(filtered), 3)  # login, logout, fail
                
            def test_validate_configuration(self):
                # Teste da validação de configuração
                from LogProcessorFunction import validate_configuration
                
                with patch.dict(os.environ, {
                    'KEY_VAULT_URL': 'https://test.vault.azure.net/',
                    'BLOB_CONTAINER_NAME': 'test-container'
                }):
                    self.assertTrue(validate_configuration())
        
        if __name__ == '__main__':
            unittest.main()
        EOF
        fi
        python -m pytest tests/ -v --cov=LogProcessorFunction --cov-report=xml
        popd

    - name: 'Upload coverage to Codecov'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job de deploy para desenvolvimento
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: validate
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME_DEV }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_DEV }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true

  # Job de deploy para produção
  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: validate
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME_PROD }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_PROD }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true

    - name: 'Post-deployment validation'
      shell: bash
      run: |
        echo "Validating deployment..."
        # Aguardar alguns segundos para o deployment estar ativo
        sleep 30
        
        # Verificar se a função está respondendo (opcional)
        # curl -f https://${{ secrets.AZURE_FUNCTIONAPP_NAME_PROD }}.azurewebsites.net/api/health || exit 1
        
        echo "Deployment validation completed successfully"

  # Job de notificação
  notify:
    runs-on: ubuntu-latest
    name: Notify Teams
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: 'Notify Microsoft Teams'
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        title: 'Azure Function Deployment'
        summary: 'Deployment status for FunctionCopy'
        text: |
          **Deployment Status**: ${{ job.status }}
          **Branch**: ${{ github.ref }}
          **Commit**: ${{ github.sha }}
          **Author**: ${{ github.actor }}
        theme_color: ${{ job.status == 'success' && '00FF00' || 'FF0000' }}

