[bandit]
# Configuração do Bandit para análise de segurança do código Python

# Diretórios a serem analisados
targets = LogProcessorFunction

# Diretórios a serem excluídos
exclude_dirs = tests,venv,.venv,env,.env,__pycache__,.pytest_cache

# Testes a serem executados (todos por padrão)
# tests = B101,B102,B103,B104,B105,B106,B107,B108,B110,B112,B201,B301,B302,B303,B304,B305,B306,B307,B308,B309,B310,B311,B312,B313,B314,B315,B316,B317,B318,B319,B320,B321,B322,B323,B324,B325,B401,B402,B403,B404,B405,B406,B407,B408,B409,B410,B411,B412,B413,B501,B502,B503,B504,B505,B506,B507,B601,B602,B603,B604,B605,B606,B607,B608,B609,B610,B611,B701,B702,B703

# Testes a serem ignorados
# skip = B101,B601

# Nível de severidade mínimo para reportar
# assert_used: B101 - Uso de assert (pode ser desabilitado em produção)
# hardcoded_password_string: B105 - Possível senha hardcoded
# hardcoded_password_funcarg: B106 - Possível senha como argumento
# hardcoded_password_default: B107 - Possível senha como valor padrão
# hardcoded_bind_all_interfaces: B104 - Bind em todas as interfaces
# exec_used: B102 - Uso de exec
# eval_used: B307 - Uso de eval
# subprocess_popen_with_shell_equals_true: B602 - subprocess com shell=True
# subprocess_without_shell_equals_false: B603 - subprocess sem shell=False
# any_other_function_with_shell_equals_true: B604 - Outras funções com shell=True
# start_process_with_a_shell: B605 - Iniciar processo com shell
# start_process_with_no_shell: B606 - Iniciar processo sem shell
# start_process_with_partial_path: B607 - Processo com caminho parcial
# hardcoded_sql_expressions: B608 - SQL hardcoded
# linux_commands_wildcard_injection: B609 - Wildcard injection
# django_extra_used: B610 - Django extra() usado
# django_rawsql_used: B611 - Django RawSQL usado

# Configurações específicas
[bandit.any_other_function_with_shell_equals_true]
no_shell = [
    os.execl,
    os.execle,
    os.execlp,
    os.execlpe,
    os.execv,
    os.execve,
    os.execvp,
    os.execvpe,
    os.spawnl,
    os.spawnle,
    os.spawnlp,
    os.spawnlpe,
    os.spawnv,
    os.spawnve,
    os.spawnvp,
    os.spawnvpe,
    os.startfile
]

shell = [
    os.system,
    os.popen,
    os.popen2,
    os.popen3,
    os.popen4,
    popen2.popen2,
    popen2.popen3,
    popen2.popen4,
    popen2.Popen3,
    popen2.Popen4,
    commands.getoutput,
    commands.getstatusoutput
]

subprocess = [
    subprocess.Popen,
    subprocess.call,
    subprocess.check_call,
    subprocess.check_output,
    subprocess.run
]

[bandit.hardcoded_password_string]
# Palavras que podem indicar senhas hardcoded
word_list = password,pass,passwd,pwd,secret,token,api_key,apikey,access_key,auth,authentication,credential,cred

[bandit.ssl_with_bad_version]
# Versões SSL/TLS consideradas inseguras
bad_protocol_versions = SSLv2,SSLv3,TLSv1,TLSv1_1

[bandit.ssl_with_bad_defaults]
# Configurações SSL/TLS inseguras
bad_protocol_versions = SSLv2,SSLv3,TLSv1,TLSv1_1

[bandit.ssl_with_no_version]
# Verificar se a versão SSL/TLS está especificada
check_httplib = True

# Formato de saída
# Opções: csv, custom, html, json, screen, txt, xml, yaml
# format = json

# Arquivo de saída
# output = bandit-report.json

# Nível de confiança mínimo
# Opções: LOW, MEDIUM, HIGH
confidence = MEDIUM

# Nível de severidade mínimo
# Opções: LOW, MEDIUM, HIGH
severity = LOW

# Mostrar apenas issues de alta severidade
# severity = HIGH

# Mostrar código fonte nos relatórios
include_source = True

# Número de linhas de contexto a mostrar
lines = 3

